version: 0.2

# --- ENVIRONMENT VARIABLES FROM PARAMETER STORE ---
env:
  # These variables load secrets and credentials securely from AWS Systems Manager Parameter Store.
  parameter-store:
    DOCKER_REGISTRY_USERNAME: /cicd/docker-credentials/username
    DOCKER_REGISTRY_PASSWORD: /cicd/docker-credentials/password
    DOCKER_REGISTRY_URL: /cicd/docker-registry/url
    SONAR_TOKEN: /cicd/sonar/sonar-token

phases:
  install:
    # --- FIX 1: Removed runtime-versions ---
    # The COMMAND_EXECUTION_ERROR during install suggests the specified runtime (java: corretto17) 
    # is not available on the CodeBuild image/architecture being used.
    # We will install Java manually in the pre_build phase to ensure compatibility.
    # runtime-versions:
    #   java: corretto17 # REMOVED

  # --- PRE-BUILD PHASE: SECURITY TOOL & SCANNER SETUP (SonarQube Active) ---
  pre_build:
    commands:
      - echo "Installing dependencies..."

      # --- FIX 2: Manually install Corretto 17 ---
      # Assuming an Amazon Linux 2/3 base image (common in CodeBuild). This installs the required Java for SonarQube.
      - echo "Manually installing Corretto 17 to avoid runtime error..."
      - yum update -y
      - yum install -y java-17-amazon-corretto-devel

      - echo "Performing Trivy file scan before building the image..."
      # 1. Install Trivy for vulnerability scanning
      # - wget https://github.com/aquasecurity/trivy/releases/download/v0.19.2/trivy_0.19.2_Linux-64bit.tar.gz
      # - tar zxvf trivy_0.19.2_Linux-64bit.tar.gz
      # - export PATH=$PATH:$PWD
      # - trivy filesystem --exit-code 0 --no-progress . >> trivyfilescan.txt
      
      # 2. Install OWASP Dependency-Check
      # - echo "Downloading and installing OWASP Dependency-Check..."
      # - wget https://github.com/jeremylong/DependencyCheck/releases/download/v7.0.2/dependency-check-7.0.2-release.zip
      # - unzip dependency-check-7.0.2-release.zip
      
      # 3. Install SonarQube Scanner (ACTIVATED)
      - echo "Setting up SonarQube Scanner..."
      - export SONAR_SCANNER_VERSION=4.7.0.2747
      - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
      - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
      - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
      - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
      - export SONAR_SCANNER_OPTS="-server"

  # --- BUILD PHASE: DOCKER IMAGE CREATION & PUSH (Uncommented for core function) ---
  build:
    commands:
      - echo "Running tests..."
      - echo "Building and Pushing Docker image..."

      # Define IMAGE_TAG and IMAGE_URI environment variables for use in all subsequent phases.
      # The tag uses the first 7 characters of the commit ID.
      - export IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_REPO="$DOCKER_REGISTRY_URL/$DOCKER_REGISTRY_USERNAME/swiggy"
      - export IMAGE_URI="$IMAGE_REPO:$IMAGE_TAG"

      # 1. Docker Login (uses credentials from Parameter Store)
      - echo "Docker Login to $DOCKER_REGISTRY_URL with user $DOCKER_REGISTRY_USERNAME"
      - echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USERNAME" --password-stdin "$DOCKER_REGISTRY_URL"
      
      # FIX: Run docker build from the correct directory where Dockerfile resides.
      - cd projects/Swiggy_clone

      # 2. Docker Build (Tagging with the dynamic commit hash)
      - docker build -t "$IMAGE_URI" .
      
      # 3. Docker Push (Tagged with commit hash)
      - docker push "$IMAGE_URI"

      # 4. Docker Tag and Push (Also tag with :latest for easy reference)
      - docker tag "$IMAGE_URI" "$IMAGE_REPO:latest"
      - docker push "$IMAGE_REPO:latest"
      
      # FIX: Return to the root directory for post_build artifacts.
      - cd ../..

  # --- POST-BUILD PHASE: FINAL STEPS (SonarQube Active) ---
  post_build:
    commands:
      # FIX: Copy appspec.yaml to the root for artifact collection.
      - cp projects/Swiggy_clone/appspec.yaml .
      
      # 1. Trivy Image Scan (post-build)
      - echo "Performing Trivy image scan after building the image..."
      # The Trivy command is updated to use the dynamically generated IMAGE_URI variable
      # - trivy image "$IMAGE_URI" >> trivyimage.txt

      # 2. Run OWASP Dependency-Check Scan
      # - echo "Running OWASP Dependency-Check scan..."
      # - cd dependency-check/bin
      # - ./dependency-check.sh --scan . --format ALL
      # - echo "Build completed successfully!"

      # 3. SonarQube Analysis (ACTIVATED)
      - echo "Running SonarQube analysis..."
      - sonar-scanner -Dsonar.projectKey=swiggy -Dsonar.sources=projects/Swiggy_clone -Dsonar.host.url=http://3.110.187.226:9000 -Dsonar.login=$SONAR_TOKEN
      
      # 4. SES Email Notification (Restored to madithati123@gmail.com and ap-south-1)
      # - aws ses send-email --from "noreply@gmail.com" --to "abisec@gmail.com" --subject "CodeBuild Status: $CODEBUILD_BUILD_ID" --text "Build status: $CODEBUILD_BUILD_STATUS" --region "ap-south-1"

# --- ARTIFACTS ---
artifacts:
  # The appspec.yaml is now copied to the root directory during the post_build phase.
  files:
    - appspec.yaml
